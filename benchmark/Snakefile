import linopy
import pyomo

NRANGE = [10, 20, 50, 100, 200, 300, 400, 500, 600, 800]
SOLVERS = ["gurobi", "cbc"]


rule all:
    input: expand("benchmarks/{solver}/time.pdf", solver=SOLVERS)

rule benchmark_linopy_single:
    params:
        nrange = NRANGE,
    benchmark:
        "benchmarks/{solver}/linopy/{N}.txt"
    script: "scripts/run-linopy.py"


rule benchmark_pyomo_single:
    params:
        nrange = NRANGE,
    benchmark:
        "benchmarks/{solver}/pyomo/{N}.txt"
    script: "scripts/run-pyomo.py"

rule benchmark_jump:
    params:
        nrange = NRANGE,
    output:
        "benchmarks/{solver}/jump.csv"
    script: "scripts/benchmark-jump.jl"


rule write_lp_files:
    output:
        expand("benchmarks/lp_files/{N}.lp", N=NRANGE)
    script: "scripts/write-lp-file.py"


rule benchmark_glpk_single:
    input:
        "benchmarks/lp_files/{N}.lp"
    benchmark:
        "benchmarks/glpk/solver/{N}.txt"
    shell: "glpsol --lp {input} --output {input}.sol"


rule benchmark_cbc_single:
    input:
        "benchmarks/lp_files/{N}.lp"
    benchmark:
        "benchmarks/cbc/solver/{N}.txt"
    shell: "cbc -import {input} -solve -solu {input}.sol"

rule benchmark_gurobi_single:
    input:
        "benchmarks/lp_files/{N}.lp"
    benchmark:
        "benchmarks/gurobi/solver/{N}.txt"
    shell: "gurobi_cl ResultFile={input}.sol {input}"


rule concat_benchmarks:
    params:
        nrange = NRANGE
    input:
        lambda w: expand("benchmarks/{solver}/{api}/{N}.txt", N=NRANGE, solver=w.solver, api=w.api)
    output:
        benchmark="benchmarks/{solver}/{api}.csv"
    script:
        "scripts/concat-benchmarks.py"


rule plot_benchmarks:
    input:
        lambda w: expand("benchmarks/{solver}/{api}.csv", api=['pyomo', 'linopy', 'solver'], solver=w.solver)
    output:
        time="benchmarks/{solver}/time.pdf",
        memory="benchmarks/{solver}/memory.pdf"
    notebook:
        "notebooks/plot-benchmarks.py.ipynb"
